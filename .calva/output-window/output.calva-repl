; This is the Calva evaluation results output window.
; TIPS: The keyboard shortcut `ctrl+alt+c o` shows and focuses this window
;   when connected to a REPL session.
; Please see https://calva.io/output/ for more info.
; Happy coding! ♥️

; Jacking in...
; Starting Jack-in Terminal: clojure -Sdeps '{:deps {nrepl/nrepl {:mvn/version,"0.8.3"},cider/cider-nrepl {:mvn/version,"0.25.11"}}}' -A:run-x -m nrepl.cmdline --middleware "[cider.nrepl/cider-middleware]"
; Hooking up nREPL sessions...
; Connected session: clj
; TIPS: 
;   - You can edit the contents here. Use it as a REPL if you like.
;   - `alt+enter` evaluates the current top level form.
;   - `ctrl+enter` evaluates the current form.
;   - `alt+up` and `alt+down` traverse up and down the REPL command history
;      when the cursor is after the last contents at the prompt
;   - Clojure lines in stack traces are peekable and clickable.
clj꞉user꞉> 
; Jack-in done.
clj꞉user꞉> 
; Syntax error (IllegalArgumentException) compiling new at (src/clojurust/test.clj:36:1).
; Unable to resolve classname: Reflexion
clj꞉clojurust.test꞉> 
; Syntax error (IllegalArgumentException) compiling new at (src/clojurust/test.clj:37:1).
; Unable to resolve classname: Reflexion
clj꞉clojurust.test꞉> 
; Syntax error macroexpanding clojure.core/import at (src/clojurust/test.clj:5:1).
; "org.reflections.reflections.Reflection" - failed: simple-symbol? at: [:class :spec] spec: :clojure.core.specs.alpha/quotable-import-list
"org.reflections.reflections.Reflection" - failed: (or (nil? %) (sequential? %)) at: [:class :quoted-spec] spec: :clojure.core.specs.alpha/quotable-import-list
"org.reflections.reflections.Reflection" - failed: (or (nil? %) (sequential? %)) at: [:package-list :spec] spec: :clojure.core.specs.alpha/package-list
"org.reflections.reflections.Reflection" - failed: (or (nil? %) (sequential? %)) at: [:package-list :quoted-spec] spec: :clojure.core.specs.alpha/quotable-import-list
clj꞉clojurust.test꞉> 
; Syntax error macroexpanding clojure.core/import at (src/clojurust/test.clj:5:1).
; "org.reflections.reflections/Reflection" - failed: simple-symbol? at: [:class :spec] spec: :clojure.core.specs.alpha/quotable-import-list
"org.reflections.reflections/Reflection" - failed: (or (nil? %) (sequential? %)) at: [:class :quoted-spec] spec: :clojure.core.specs.alpha/quotable-import-list
"org.reflections.reflections/Reflection" - failed: (or (nil? %) (sequential? %)) at: [:package-list :spec] spec: :clojure.core.specs.alpha/package-list
"org.reflections.reflections/Reflection" - failed: (or (nil? %) (sequential? %)) at: [:package-list :quoted-spec] spec: :clojure.core.specs.alpha/quotable-import-list
clj꞉clojurust.test꞉> 
; Syntax error macroexpanding clojure.core/import at (src/clojurust/test.clj:5:1).
; "org.reflections.reflections.Reflection" - failed: simple-symbol? at: [:class :spec] spec: :clojure.core.specs.alpha/quotable-import-list
"org.reflections.reflections.Reflection" - failed: (or (nil? %) (sequential? %)) at: [:class :quoted-spec] spec: :clojure.core.specs.alpha/quotable-import-list
"org.reflections.reflections.Reflection" - failed: (or (nil? %) (sequential? %)) at: [:package-list :spec] spec: :clojure.core.specs.alpha/package-list
"org.reflections.reflections.Reflection" - failed: (or (nil? %) (sequential? %)) at: [:package-list :quoted-spec] spec: :clojure.core.specs.alpha/quotable-import-list
clj꞉clojurust.test꞉> 
; Syntax error macroexpanding clojure.core/import at (src/clojurust/test.clj:5:1).
; org.reflections.reflexions/Reflexion - failed: simple-symbol? at: [:class :spec] spec: :clojure.core.specs.alpha/quotable-import-list
org.reflections.reflexions/Reflexion - failed: (or (nil? %) (sequential? %)) at: [:class :quoted-spec] spec: :clojure.core.specs.alpha/quotable-import-list
org.reflections.reflexions/Reflexion - failed: (or (nil? %) (sequential? %)) at: [:package-list :spec] spec: :clojure.core.specs.alpha/package-list
org.reflections.reflexions/Reflexion - failed: (or (nil? %) (sequential? %)) at: [:package-list :quoted-spec] spec: :clojure.core.specs.alpha/quotable-import-list
clj꞉clojurust.test꞉> 
; Execution error (ClassNotFoundException) at java.net.URLClassLoader/findClass (URLClassLoader.java:471).
; org.reflections.reflexions.Reflexion
clj꞉clojurust.test꞉> 
; Execution error (ClassNotFoundException) at java.net.URLClassLoader/findClass (URLClassLoader.java:471).
; org.reflections.reflections.Reflection
clj꞉clojurust.test꞉> 
; Execution error (ClassNotFoundException) at java.net.URLClassLoader/findClass (URLClassLoader.java:471).
; org.reflections.Reflection
clj꞉clojurust.test꞉> 
; Execution error (ClassNotFoundException) at java.net.URLClassLoader/findClass (URLClassLoader.java:471).
; org.reflections.reflections.Reflection
clj꞉clojurust.test꞉> 
; Execution error (ClassNotFoundException) at java.net.URLClassLoader/findClass (URLClassLoader.java:471).
; org.reflections.Reflection
clj꞉clojurust.test꞉> 
; Execution error (ClassNotFoundException) at java.net.URLClassLoader/findClass (URLClassLoader.java:471).
; org.reflections.*
clj꞉clojurust.test꞉> 
; Execution error (ClassNotFoundException) at java.net.URLClassLoader/findClass (URLClassLoader.java:471).
; org.reflections.reflection.*
clj꞉clojurust.test꞉> 
; Execution error (ClassNotFoundException) at java.net.URLClassLoader/findClass (URLClassLoader.java:471).
; org.reflections.reflection
clj꞉clojurust.test꞉> 
; Evaluating file: test.clj
; Syntax error (ClassNotFoundException) compiling at (src/clojurust/test.clj:5:1).
; org.reflections.reflection
; Evaluation of file test.clj failed: class clojure.lang.Compiler$CompilerException

clj꞉clojurust.test꞉> 
clj꞉clojurust.test꞉> 
; Execution error (ClassNotFoundException) at java.net.URLClassLoader/findClass (URLClassLoader.java:471).
; org.reflections
clj꞉clojurust.test꞉> 
; Evaluating file: test.clj
; Syntax error (ClassNotFoundException) compiling at (src/clojurust/test.clj:5:1).
; org.reflections.reflections
; Evaluation of file test.clj failed: class clojure.lang.Compiler$CompilerException

clj꞉clojurust.test꞉> 
clj꞉clojurust.test꞉> 
; Execution error (IllegalArgumentException) at clojurust.test/eval7234 (REPL:39).
; No matching field found: getURLs for class jdk.internal.loader.ClassLoaders$AppClassLoader
clj꞉clojurust.test꞉> 
; Evaluating file: test.clj
{java.lang.reflect.AnnotatedElement
 {:bases nil,
  :flags #{:interface :public :abstract},
  :members
  #{{:name getDeclaredAnnotations,
     :return-type java.lang.annotation.Annotation<>,
     :declaring-class java.lang.reflect.AnnotatedElement,
     :parameter-types [],
     :exception-types [],
     :flags #{:public :abstract}}
    {:name getDeclaredAnnotationsByType,
     :return-type java.lang.annotation.Annotation<>,
     :declaring-class java.lang.reflect.AnnotatedElement,
     :parameter-types [java.lang.Class],
     :exception-types [],
     :flags #{:public}}
    {:name lambda$getDeclaredAnnotationsByType$0,
     :return-type java.lang.annotation.Annotation,
     :declaring-class java.lang.reflect.AnnotatedElement,
     :parameter-types
     [java.lang.annotation.Annotation java.lang.annotation.Annotation],
     :exception-types [],
     :flags #{:private :static :synthetic}}
    {:name getDeclaredAnnotation,
     :return-type java.lang.annotation.Annotation,
     :declaring-class java.lang.reflec
t.AnnotatedElement,
     :parameter-types [java.lang.Class],
     :exception-types [],
     :flags #{:public}}
    {:name isAnnotationPresent,
     :return-type boolean,
     :declaring-class java.lang.reflect.AnnotatedElement,
     :parameter-types [java.lang.Class],
     :exception-types [],
     :flags #{:public}}
    {:name getAnnotations,
     :return-type java.lang.annotation.Annotation<>,
     :declaring-class java.lang.reflect.AnnotatedElement,
     :parameter-types [],
     :exception-types [],
     :flags #{:public :abstract}}
    {:name getAnnotation,
     :return-type java.lang.annotation.Annotation,
     :declaring-class java.lang.reflect.AnnotatedElement,
     :parameter-types [java.lang.Class],
     :exception-types [],
     :flags #{:public :abstract}}
    {:name getAnnotationsByType,
     :return-type java.lang.annotation.Annotation<>,
     :declaring-class java.lang.reflect.AnnotatedElement,
     :parameter-types [java.lang.Class],
     :exception-types [],
     :flags #{:public}}}}}
(#namespace[nrepl.middleware.interruptible-eval]
 #namespace[cider.nrepl.inlined-deps.suitable.v0v3v5.suitable.complete-for-nrepl]
 #namespace[clojurust.test]
 #namespace[cider.nrepl.middleware.track-state]
 #namespace[cider.nrepl.inlined-deps.orchard.v0v6v5.orchard.util.os]
 #namespace[clojure.stacktrace]
 #namespace[cider.nrepl.middleware.util.nrepl]
 #namespace[nrepl.cmdline]
 #namespace[clojure.test]
 #namespace[cider.nrepl.inlined-deps.orchard.v0v6v5.orchard.java.resource]
 #namespace[cider.nrepl.inlined-deps.toolsreader.v1v3v2.clojure.tools.reader]
 #namespace[cider.nrepl.middleware.content-type]
 #namespace[cider.nrepl.middleware.debug]
 #namespace[clojure.core.server]
 #namespace[clojure.core.specs.alpha]
 #namespace[cider.nrepl.inlined-deps.dynapath.v1v1v0.dynapath.defaults]
 #namespace[cider.nrepl.inlined-deps.orchard.v0v6v5.orchard.meta]
 #namespace[nrepl.server]
 #namespace[cider.nrepl.inlined-deps.orchard.v0v6v5.orchard.inspect]
 #namespace[nrepl.middleware.session]
 #namespace[cider.nrepl.middle
ware.util.coerce]
 #namespace[clojure.reflect]
 #namespace[cider.nrepl.middleware.inspect]
 #namespace[cider.nrepl.inlined-deps.orchard.v0v6v5.orchard.spec]
 #namespace[cider.nrepl.inlined-deps.javaclasspath.v1v0v0.clojure.java.classpath]
 #namespace[cider.nrepl.middleware.util.error-handling]
 #namespace[nrepl.middleware.caught]
 #namespace[cider.nrepl.inlined-deps.toolsreader.v1v3v2.clojure.tools.reader.default-data-readers]
 #namespace[cider.nrepl.inlined-deps.dynapath.v1v1v0.dynapath.dynamic-classpath]
 #namespace[clojure.spec.alpha]
 #namespace[nrepl.util.completion]
 #namespace[cider.nrepl.inlined-deps.toolsnamespace.v1v0v0.clojure.tools.namespace.dependency]
 #namespace[cider.nrepl.middleware.ns]
 #namespace[clojure.set]
 #namespace[cider.nrepl.middleware.complete]
 #namespace[cider.nrepl.middleware.stacktrace]
 #namespace[cider.nrepl.inlined-deps.orchard.v0v6v5.orchard.clojuredocs]
 #namespace[cider.nrepl.inlined-deps.compliment.v0v3v11.compliment.sources]
 #namespace[nrepl.ack]
 #namespace[clojure.st
ring]
 #namespace[clojure.java.browse]
 #namespace[clojure.java.javadoc]
 #namespace[cider.nrepl.inlined-deps.toolsreader.v1v3v2.clojure.tools.reader.impl.inspect]
 #namespace[cider.nrepl.inlined-deps.compliment.v0v3v11.compliment.sources.keywords]
 #namespace[clojure.repl]
 #namespace[cider.nrepl.inlined-deps.suitable.v0v3v5.suitable.compliment.sources.cljs.analysis]
 #namespace[cider.nrepl.inlined-deps.compliment.v0v3v11.compliment.sources.namespaces-and-classes]
 #namespace[cider.nrepl.inlined-deps.dynapath.v1v1v0.dynapath.util]
 #namespace[clojure.template]
 #namespace[nrepl.misc]
 #namespace[cider.nrepl.inlined-deps.toolsreader.v1v3v2.clojure.tools.reader.reader-types]
 #namespace[clojure.core]
 #namespace[cider.nrepl.inlined-deps.orchard.v0v6v5.orchard.java.parser]
 #namespace[clojure.walk]
 #namespace[nrepl.middleware]
 #namespace[cider.nrepl.inlined-deps.orchard.v0v6v5.orchard.eldoc]
 #namespace[cider.nrepl.inlined-deps.toolsreader.v1v3v2.clojure.tools.reader.impl.utils]
 #namespace[cider.nrepl.inline
d-deps.toolsreader.v1v3v2.clojure.tools.reader.impl.commons]
 #namespace[cider.nrepl.middleware]
 #namespace[clojure.spec.gen.alpha]
 #namespace[cider.nrepl.middleware.enlighten]
 #namespace[cider.nrepl.inlined-deps.compliment.v0v3v11.compliment.sources.ns-mappings]
 #namespace[cider.nrepl.inlined-deps.compliment.v0v3v11.compliment.sources.resources]
 #namespace[cider.nrepl.inlined-deps.suitable.v0v3v5.suitable.ast]
 #namespace[clojure.uuid]
 #namespace[clojure.main]
 #namespace[cider.nrepl.middleware.util.cljs]
 #namespace[user]
 #namespace[cider.nrepl.inlined-deps.compliment.v0v3v11.compliment.sources.local-bindings]
 #namespace[nrepl.middleware.dynamic-loader]
 #namespace[cider.nrepl.middleware.util]
 #namespace[clojure.edn]
 #namespace[clojure.java.io]
 #namespace[cider.nrepl.inlined-deps.suitable.v0v3v5.suitable.compliment.sources.cljs]
 #namespace[cider.nrepl]
 #namespace[cider.nrepl.inlined-deps.suitable.v0v3v5.suitable.js-completions]
 #namespace[clojure.core.protocols]
 #namespace[cider.nrepl.inlined
-deps.compliment.v0v3v11.compliment.sources.class-members]
 #namespace[clojure.pprint]
 #namespace[cider.nrepl.inlined-deps.toolsnamespace.v1v0v0.clojure.tools.namespace.parse]
 #namespace[nrepl.util.lookup]
 #namespace[cider.nrepl.inlined-deps.orchard.v0v6v5.orchard.java.classpath]
 #namespace[nrepl.bencode]
 #namespace[nrepl.middleware.load-file]
 #namespace[cider.nrepl.version]
 #namespace[nrepl.version]
 #namespace[clojure.instant]
 #namespace[cider.nrepl.inlined-deps.toolsreader.v1v3v2.clojure.tools.reader.impl.errors]
 #namespace[nrepl.middleware.lookup]
 #namespace[nrepl.transport]
 #namespace[cider.nrepl.inlined-deps.orchard.v0v6v5.orchard.misc]
 #namespace[cider.nrepl.inlined-deps.orchard.v0v6v5.orchard.info]
 #namespace[cider.nrepl.middleware.util.meta]
 #namespace[nrepl.middleware.sideloader]
 #namespace[cider.nrepl.inlined-deps.compliment.v0v3v11.compliment.utils]
 #namespace[cider.nrepl.inlined-deps.orchard.v0v6v5.orchard.query]
 #namespace[cider.nrepl.inlined-deps.compliment.v0v3v11.compliment.c
ontext]
 #namespace[cider.nrepl.middleware.info]
 #namespace[cider.nrepl.inlined-deps.orchard.v0v6v5.orchard.cljs.analysis]
 #namespace[clojure.datafy]
 #namespace[cider.nrepl.inlined-deps.compliment.v0v3v11.compliment.sources.special-forms]
 #namespace[cider.nrepl.print-method]
 #namespace[cider.nrepl.inlined-deps.orchard.v0v6v5.orchard.cljs.meta]
 #namespace[clojure.java.shell]
 #namespace[cider.nrepl.inlined-deps.compliment.v0v3v11.compliment.core]
 #namespace[nrepl.core]
 #namespace[nrepl.middleware.completion]
 #namespace[nrepl.config]
 #namespace[cider.nrepl.inlined-deps.toolsnamespace.v1v0v0.clojure.tools.namespace.track]
 #namespace[cider.nrepl.inlined-deps.toolsnamespace.v1v0v0.clojure.tools.namespace.file]
 #namespace[cider.nrepl.inlined-deps.orchard.v0v6v5.orchard.namespace]
 #namespace[cider.nrepl.inlined-deps.toolsnamespace.v1v0v0.clojure.tools.namespace.find]
 #namespace[nrepl.middleware.print]
 #namespace[clojure.zip]
 #namespace[cider.nrepl.inlined-deps.orchard.v0v6v5.orchard.java]
 #namespace
[cider.nrepl.middleware.slurp]
 #namespace[cider.nrepl.middleware.util.instrument])
; Syntax error (IllegalArgumentException) compiling new at (src/clojurust/test.clj:37:1).
; Unable to resolve classname: Reflection
; Evaluation of file test.clj failed: class clojure.lang.Compiler$CompilerException

clj꞉clojurust.test꞉> 
clj꞉clojurust.test꞉> 
; Evaluating file: test.clj
{java.lang.reflect.AnnotatedElement
 {:bases nil,
  :flags #{:interface :public :abstract},
  :members
  #{{:name getDeclaredAnnotations,
     :return-type java.lang.annotation.Annotation<>,
     :declaring-class java.lang.reflect.AnnotatedElement,
     :parameter-types [],
     :exception-types [],
     :flags #{:public :abstract}}
    {:name getDeclaredAnnotationsByType,
     :return-type java.lang.annotation.Annotation<>,
     :declaring-class java.lang.reflect.AnnotatedElement,
     :parameter-types [java.lang.Class],
     :exception-types [],
     :flags #{:public}}
    {:name lambda$getDeclaredAnnotationsByType$0,
     :return-type java.lang.annotation.Annotation,
     :declaring-class java.lang.reflect.AnnotatedElement,
     :parameter-types
     [java.lang.annotation.Annotation java.lang.annotation.Annotation],
     :exception-types [],
     :flags #{:private :static :synthetic}}
    {:name getDeclaredAnnotation,
     :return-type java.lang.annotation.Annotation,
     :declaring-class java.lang.reflec
t.AnnotatedElement,
     :parameter-types [java.lang.Class],
     :exception-types [],
     :flags #{:public}}
    {:name isAnnotationPresent,
     :return-type boolean,
     :declaring-class java.lang.reflect.AnnotatedElement,
     :parameter-types [java.lang.Class],
     :exception-types [],
     :flags #{:public}}
    {:name getAnnotations,
     :return-type java.lang.annotation.Annotation<>,
     :declaring-class java.lang.reflect.AnnotatedElement,
     :parameter-types [],
     :exception-types [],
     :flags #{:public :abstract}}
    {:name getAnnotation,
     :return-type java.lang.annotation.Annotation,
     :declaring-class java.lang.reflect.AnnotatedElement,
     :parameter-types [java.lang.Class],
     :exception-types [],
     :flags #{:public :abstract}}
    {:name getAnnotationsByType,
     :return-type java.lang.annotation.Annotation<>,
     :declaring-class java.lang.reflect.AnnotatedElement,
     :parameter-types [java.lang.Class],
     :exception-types [],
     :flags #{:public}}}}}
(#namespace[nrepl.middleware.interruptible-eval]
 #namespace[cider.nrepl.inlined-deps.suitable.v0v3v5.suitable.complete-for-nrepl]
 #namespace[clojurust.test]
 #namespace[cider.nrepl.middleware.track-state]
 #namespace[cider.nrepl.inlined-deps.orchard.v0v6v5.orchard.util.os]
 #namespace[clojure.stacktrace]
 #namespace[cider.nrepl.middleware.util.nrepl]
 #namespace[nrepl.cmdline]
 #namespace[clojure.test]
 #namespace[cider.nrepl.inlined-deps.orchard.v0v6v5.orchard.java.resource]
 #namespace[cider.nrepl.inlined-deps.toolsreader.v1v3v2.clojure.tools.reader]
 #namespace[cider.nrepl.middleware.content-type]
 #namespace[cider.nrepl.middleware.debug]
 #namespace[clojure.core.server]
 #namespace[clojure.core.specs.alpha]
 #namespace[cider.nrepl.inlined-deps.dynapath.v1v1v0.dynapath.defaults]
 #namespace[cider.nrepl.inlined-deps.orchard.v0v6v5.orchard.meta]
 #namespace[nrepl.server]
 #namespace[cider.nrepl.inlined-deps.orchard.v0v6v5.orchard.inspect]
 #namespace[nrepl.middleware.session]
 #namespace[cider.nrepl.middle
ware.util.coerce]
 #namespace[clojure.reflect]
 #namespace[cider.nrepl.middleware.inspect]
 #namespace[cider.nrepl.inlined-deps.orchard.v0v6v5.orchard.spec]
 #namespace[cider.nrepl.inlined-deps.javaclasspath.v1v0v0.clojure.java.classpath]
 #namespace[cider.nrepl.middleware.util.error-handling]
 #namespace[nrepl.middleware.caught]
 #namespace[cider.nrepl.inlined-deps.toolsreader.v1v3v2.clojure.tools.reader.default-data-readers]
 #namespace[cider.nrepl.inlined-deps.dynapath.v1v1v0.dynapath.dynamic-classpath]
 #namespace[clojure.spec.alpha]
 #namespace[nrepl.util.completion]
 #namespace[cider.nrepl.inlined-deps.toolsnamespace.v1v0v0.clojure.tools.namespace.dependency]
 #namespace[cider.nrepl.middleware.ns]
 #namespace[clojure.set]
 #namespace[cider.nrepl.middleware.complete]
 #namespace[cider.nrepl.middleware.stacktrace]
 #namespace[cider.nrepl.inlined-deps.orchard.v0v6v5.orchard.clojuredocs]
 #namespace[cider.nrepl.inlined-deps.compliment.v0v3v11.compliment.sources]
 #namespace[nrepl.ack]
 #namespace[clojure.st
ring]
 #namespace[clojure.java.browse]
 #namespace[clojure.java.javadoc]
 #namespace[cider.nrepl.inlined-deps.toolsreader.v1v3v2.clojure.tools.reader.impl.inspect]
 #namespace[cider.nrepl.inlined-deps.compliment.v0v3v11.compliment.sources.keywords]
 #namespace[clojure.repl]
 #namespace[cider.nrepl.inlined-deps.suitable.v0v3v5.suitable.compliment.sources.cljs.analysis]
 #namespace[cider.nrepl.inlined-deps.compliment.v0v3v11.compliment.sources.namespaces-and-classes]
 #namespace[cider.nrepl.inlined-deps.dynapath.v1v1v0.dynapath.util]
 #namespace[clojure.template]
 #namespace[nrepl.misc]
 #namespace[cider.nrepl.inlined-deps.toolsreader.v1v3v2.clojure.tools.reader.reader-types]
 #namespace[clojure.core]
 #namespace[cider.nrepl.inlined-deps.orchard.v0v6v5.orchard.java.parser]
 #namespace[clojure.walk]
 #namespace[nrepl.middleware]
 #namespace[cider.nrepl.inlined-deps.orchard.v0v6v5.orchard.eldoc]
 #namespace[cider.nrepl.inlined-deps.toolsreader.v1v3v2.clojure.tools.reader.impl.utils]
 #namespace[cider.nrepl.inline
d-deps.toolsreader.v1v3v2.clojure.tools.reader.impl.commons]
 #namespace[cider.nrepl.middleware]
 #namespace[clojure.spec.gen.alpha]
 #namespace[cider.nrepl.middleware.enlighten]
 #namespace[cider.nrepl.inlined-deps.compliment.v0v3v11.compliment.sources.ns-mappings]
 #namespace[cider.nrepl.inlined-deps.compliment.v0v3v11.compliment.sources.resources]
 #namespace[cider.nrepl.inlined-deps.suitable.v0v3v5.suitable.ast]
 #namespace[clojure.uuid]
 #namespace[clojure.main]
 #namespace[cider.nrepl.middleware.util.cljs]
 #namespace[user]
 #namespace[cider.nrepl.inlined-deps.compliment.v0v3v11.compliment.sources.local-bindings]
 #namespace[nrepl.middleware.dynamic-loader]
 #namespace[cider.nrepl.middleware.util]
 #namespace[clojure.edn]
 #namespace[clojure.java.io]
 #namespace[cider.nrepl.inlined-deps.suitable.v0v3v5.suitable.compliment.sources.cljs]
 #namespace[cider.nrepl]
 #namespace[cider.nrepl.inlined-deps.suitable.v0v3v5.suitable.js-completions]
 #namespace[clojure.core.protocols]
 #namespace[cider.nrepl.inlined
-deps.compliment.v0v3v11.compliment.sources.class-members]
 #namespace[clojure.pprint]
 #namespace[cider.nrepl.inlined-deps.toolsnamespace.v1v0v0.clojure.tools.namespace.parse]
 #namespace[nrepl.util.lookup]
 #namespace[cider.nrepl.inlined-deps.orchard.v0v6v5.orchard.java.classpath]
 #namespace[nrepl.bencode]
 #namespace[nrepl.middleware.load-file]
 #namespace[cider.nrepl.version]
 #namespace[nrepl.version]
 #namespace[clojure.instant]
 #namespace[cider.nrepl.inlined-deps.toolsreader.v1v3v2.clojure.tools.reader.impl.errors]
 #namespace[nrepl.middleware.lookup]
 #namespace[nrepl.transport]
 #namespace[cider.nrepl.inlined-deps.orchard.v0v6v5.orchard.misc]
 #namespace[cider.nrepl.inlined-deps.orchard.v0v6v5.orchard.info]
 #namespace[cider.nrepl.middleware.util.meta]
 #namespace[nrepl.middleware.sideloader]
 #namespace[cider.nrepl.inlined-deps.compliment.v0v3v11.compliment.utils]
 #namespace[cider.nrepl.inlined-deps.orchard.v0v6v5.orchard.query]
 #namespace[cider.nrepl.inlined-deps.compliment.v0v3v11.compliment.c
ontext]
 #namespace[cider.nrepl.middleware.info]
 #namespace[cider.nrepl.inlined-deps.orchard.v0v6v5.orchard.cljs.analysis]
 #namespace[clojure.datafy]
 #namespace[cider.nrepl.inlined-deps.compliment.v0v3v11.compliment.sources.special-forms]
 #namespace[cider.nrepl.print-method]
 #namespace[cider.nrepl.inlined-deps.orchard.v0v6v5.orchard.cljs.meta]
 #namespace[clojure.java.shell]
 #namespace[cider.nrepl.inlined-deps.compliment.v0v3v11.compliment.core]
 #namespace[nrepl.core]
 #namespace[nrepl.middleware.completion]
 #namespace[nrepl.config]
 #namespace[cider.nrepl.inlined-deps.toolsnamespace.v1v0v0.clojure.tools.namespace.track]
 #namespace[cider.nrepl.inlined-deps.toolsnamespace.v1v0v0.clojure.tools.namespace.file]
 #namespace[cider.nrepl.inlined-deps.orchard.v0v6v5.orchard.namespace]
 #namespace[cider.nrepl.inlined-deps.toolsnamespace.v1v0v0.clojure.tools.namespace.find]
 #namespace[nrepl.middleware.print]
 #namespace[clojure.zip]
 #namespace[cider.nrepl.inlined-deps.orchard.v0v6v5.orchard.java]
 #namespace
[cider.nrepl.middleware.slurp]
 #namespace[cider.nrepl.middleware.util.instrument])
; Syntax error (IllegalArgumentException) compiling at (src/clojurust/test.clj:37:1).
; No matching field found: getURLs for class jdk.internal.loader.ClassLoaders$AppClassLoader
; Evaluation of file test.clj failed: class clojure.lang.Compiler$CompilerException

clj꞉clojurust.test꞉> 
clj꞉clojurust.test꞉> 
; Execution error (IllegalArgumentException) at clojurust.test/eval7305 (REPL:39).
; No matching field found: getURLs for class jdk.internal.loader.ClassLoaders$AppClassLoader
clj꞉clojurust.test꞉> 
; Execution error (IllegalArgumentException) at clojurust.test/eval7309 (REPL:39).
; No matching field found: getURLs for class jdk.internal.loader.ClassLoaders$AppClassLoader
clj꞉clojurust.test꞉> 
#object[jdk.internal.loader.ClassLoaders$AppClassLoader 0x277050dc "jdk.internal.loader.ClassLoaders$AppClassLoader@277050dc"]
clj꞉clojurust.test꞉> 
; Execution error (IllegalArgumentException) at clojurust.test/eval7313 (REPL:39).
; No matching field found: getURLs for class jdk.internal.loader.ClassLoaders$AppClassLoader
clj꞉clojurust.test꞉> 
#{cider.nrepl cider.nrepl.inlined-deps.compliment.v0v3v11.compliment.context cider.nrepl.inlined-deps.compliment.v0v3v11.compliment.core cider.nrepl.inlined-deps.compliment.v0v3v11.compliment.sources cider.nrepl.inlined-deps.compliment.v0v3v11.compliment.sources.class-members cider.nrepl.inlined-deps.compliment.v0v3v11.compliment.sources.keywords cider.nrepl.inlined-deps.compliment.v0v3v11.compliment.sources.local-bindings cider.nrepl.inlined-deps.compliment.v0v3v11.compliment.sources.namespaces-and-classes cider.nrepl.inlined-deps.compliment.v0v3v11.compliment.sources.ns-mappings cider.nrepl.inlined-deps.compliment.v0v3v11.compliment.sources.resources cider.nrepl.inlined-deps.compliment.v0v3v11.compliment.sources.special-forms cider.nrepl.inlined-deps.compliment.v0v3v11.compliment.utils cider.nrepl.inlined-deps.dynapath.v1v1v0.dynapath.defaults cider.nrepl.inlined-deps.dynapath.v1v1v0.dynapath.dynamic-classpath cider.nrepl.inlined-deps.dynapath.v1v1v0.dynapath.util cider.nrepl.inlined-deps.javaclasspath.v1v0v0.clojure.java.classpath cider.nrepl.inlined-deps.orchard.v0v6v5.orchard.cljs.analysis cider.nrepl.inlined-deps.orchard.v0v6v5.orchard.cljs.meta cider.nrepl.inlined-deps.orchard.v0v6v5.orchard.clojuredocs cider.nrepl.inlined-deps.orchard.v0v6v5.orchard.eldoc cider.nrepl.inlined-deps.orchard.v0v6v5.orchard.info cider.nrepl.inlined-deps.orchard.v0v6v5.orchard.inspect cider.nrepl.inlined-deps.orchard.v0v6v5.orchard.java cider.nrepl.inlined-deps.orchard.v0v6v5.orchard.java.classpath cider.nrepl.inlined-deps.orchard.v0v6v5.orchard.java.parser cider.nrepl.inlined-deps.orchard.v0v6v5.orchard.java.resource cider.nrepl.inlined-deps.orchard.v0v6v5.orchard.meta cider.nrepl.inlined-deps.orchard.v0v6v5.orchard.misc cider.nrepl.inlined-deps.orchard.v0v6v5.orchard.namespace cider.nrepl.inlined-deps.orchard.v0v6v5.orchard.query cider.nrepl.inlined-deps.orchard.v0v6v5.orchard.spec cider.nrepl.inlined-deps.orchard.v0v6v5.orchard.util.os cider.nrepl.inlined-deps.suitable.v0v3v5.suitable.ast cider.nrepl.inlined-deps.suitable.v0v3v5.suitable.complete-for-nrepl cider.nrepl.inlined-deps.suitable.v0v3v5.suitable.compliment.sources.cljs cider.nrepl.inlined-deps.suitable.v0v3v5.suitable.compliment.sources.cljs.analysis cider.nrepl.inlined-deps.suitable.v0v3v5.suitable.js-completions cider.nrepl.inlined-deps.toolsnamespace.v1v0v0.clojure.tools.namespace.dependency cider.nrepl.inlined-deps.toolsnamespace.v1v0v0.clojure.tools.namespace.file cider.nrepl.inlined-deps.toolsnamespace.v1v0v0.clojure.tools.namespace.find cider.nrepl.inlined-deps.toolsnamespace.v1v0v0.clojure.tools.namespace.parse cider.nrepl.inlined-deps.toolsnamespace.v1v0v0.clojure.tools.namespace.track cider.nrepl.inlined-deps.toolsreader.v1v3v2.clojure.tools.reader cider.nrepl.inlined-deps.toolsreader.v1v3v2.clojure.tools.reader.default-data-readers cider.nrepl.inlined-deps.toolsreader.v1v3v2.clojure.tools.reader.impl.commons cider.nrepl.inlined-deps.toolsreader.v1v3v2.clojure.tools.reader.impl.errors cider.nrepl.inlined-deps.toolsreader.v1v3v2.clojure.tools.reader.impl.inspect cider.nrepl.inlined-deps.toolsreader.v1v3v2.clojure.tools.reader.impl.utils cider.nrepl.inlined-deps.toolsreader.v1v3v2.clojure.tools.reader.reader-types cider.nrepl.middleware cider.nrepl.middleware.complete cider.nrepl.middleware.content-type cider.nrepl.middleware.debug cider.nrepl.middleware.info cider.nrepl.middleware.inspect cider.nrepl.middleware.ns cider.nrepl.middleware.slurp cider.nrepl.middleware.stacktrace cider.nrepl.middleware.track-state cider.nrepl.middleware.util cider.nrepl.middleware.util.cljs cider.nrepl.middleware.util.coerce cider.nrepl.middleware.util.error-handling cider.nrepl.middleware.util.instrument cider.nrepl.middleware.util.meta cider.nrepl.middleware.util.nrepl cider.nrepl.print-method cider.nrepl.version clojure.core.protocols clojure.core.server clojure.core.specs.alpha clojure.datafy clojure.edn clojure.instant clojure.java.browse clojure.java.io clojure.java.javadoc clojure.java.shell clojure.main clojure.pprint clojure.reflect clojure.repl clojure.set clojure.spec.alpha clojure.spec.gen.alpha clojure.stacktrace clojure.string clojure.template clojure.test clojure.uuid clojure.walk clojure.zip clojurust.test nrepl.ack nrepl.bencode nrepl.cmdline nrepl.config nrepl.core nrepl.middleware nrepl.middleware.caught nrepl.middleware.completion nrepl.middleware.dynamic-loader nrepl.middleware.interruptible-eval nrepl.middleware.load-file nrepl.middleware.lookup nrepl.middleware.print nrepl.middleware.session nrepl.middleware.sideloader nrepl.misc nrepl.server nrepl.transport nrepl.util.completion nrepl.util.lookup nrepl.version}
clj꞉clojurust.test꞉> 
#{cider.nrepl
  cider.nrepl.inlined-deps.compliment.v0v3v11.compliment.context
  cider.nrepl.inlined-deps.compliment.v0v3v11.compliment.core
  cider.nrepl.inlined-deps.compliment.v0v3v11.compliment.sources
  cider.nrepl.inlined-deps.compliment.v0v3v11.compliment.sources.class-members
  cider.nrepl.inlined-deps.compliment.v0v3v11.compliment.sources.keywords
  cider.nrepl.inlined-deps.compliment.v0v3v11.compliment.sources.local-bindings
  cider.nrepl.inlined-deps.compliment.v0v3v11.compliment.sources.namespaces-and-classes
  cider.nrepl.inlined-deps.compliment.v0v3v11.compliment.sources.ns-mappings
  cider.nrepl.inlined-deps.compliment.v0v3v11.compliment.sources.resources
  cider.nrepl.inlined-deps.compliment.v0v3v11.compliment.sources.special-forms
  cider.nrepl.inlined-deps.compliment.v0v3v11.compliment.utils
  cider.nrepl.inlined-deps.dynapath.v1v1v0.dynapath.defaults
  cider.nrepl.inlined-deps.dynapath.v1v1v0.dynapath.dynamic-classpath
  cider.nrepl.inlined-deps.dynapath.v1v1v0.dynapath.util
  cider.nrepl.i
nlined-deps.javaclasspath.v1v0v0.clojure.java.classpath
  cider.nrepl.inlined-deps.orchard.v0v6v5.orchard.cljs.analysis
  cider.nrepl.inlined-deps.orchard.v0v6v5.orchard.cljs.meta
  cider.nrepl.inlined-deps.orchard.v0v6v5.orchard.clojuredocs
  cider.nrepl.inlined-deps.orchard.v0v6v5.orchard.eldoc
  cider.nrepl.inlined-deps.orchard.v0v6v5.orchard.info
  cider.nrepl.inlined-deps.orchard.v0v6v5.orchard.inspect
  cider.nrepl.inlined-deps.orchard.v0v6v5.orchard.java
  cider.nrepl.inlined-deps.orchard.v0v6v5.orchard.java.classpath
  cider.nrepl.inlined-deps.orchard.v0v6v5.orchard.java.parser
  cider.nrepl.inlined-deps.orchard.v0v6v5.orchard.java.resource
  cider.nrepl.inlined-deps.orchard.v0v6v5.orchard.meta
  cider.nrepl.inlined-deps.orchard.v0v6v5.orchard.misc
  cider.nrepl.inlined-deps.orchard.v0v6v5.orchard.namespace
  cider.nrepl.inlined-deps.orchard.v0v6v5.orchard.query
  cider.nrepl.inlined-deps.orchard.v0v6v5.orchard.spec
  cider.nrepl.inlined-deps.orchard.v0v6v5.orchard.util.os
  cider.nrepl.inlined-deps.s
uitable.v0v3v5.suitable.ast
  cider.nrepl.inlined-deps.suitable.v0v3v5.suitable.complete-for-nrepl
  cider.nrepl.inlined-deps.suitable.v0v3v5.suitable.compliment.sources.cljs
  cider.nrepl.inlined-deps.suitable.v0v3v5.suitable.compliment.sources.cljs.analysis
  cider.nrepl.inlined-deps.suitable.v0v3v5.suitable.js-completions
  cider.nrepl.inlined-deps.toolsnamespace.v1v0v0.clojure.tools.namespace.dependency
  cider.nrepl.inlined-deps.toolsnamespace.v1v0v0.clojure.tools.namespace.file
  cider.nrepl.inlined-deps.toolsnamespace.v1v0v0.clojure.tools.namespace.find
  cider.nrepl.inlined-deps.toolsnamespace.v1v0v0.clojure.tools.namespace.parse
  cider.nrepl.inlined-deps.toolsnamespace.v1v0v0.clojure.tools.namespace.track
  cider.nrepl.inlined-deps.toolsreader.v1v3v2.clojure.tools.reader
  cider.nrepl.inlined-deps.toolsreader.v1v3v2.clojure.tools.reader.default-data-readers
  cider.nrepl.inlined-deps.toolsreader.v1v3v2.clojure.tools.reader.impl.commons
  cider.nrepl.inlined-deps.toolsreader.v1v3v2.clojure.tools.read
er.impl.errors
  cider.nrepl.inlined-deps.toolsreader.v1v3v2.clojure.tools.reader.impl.inspect
  cider.nrepl.inlined-deps.toolsreader.v1v3v2.clojure.tools.reader.impl.utils
  cider.nrepl.inlined-deps.toolsreader.v1v3v2.clojure.tools.reader.reader-types
  cider.nrepl.middleware
  cider.nrepl.middleware.complete
  cider.nrepl.middleware.content-type
  cider.nrepl.middleware.debug
  cider.nrepl.middleware.info
  cider.nrepl.middleware.inspect
  cider.nrepl.middleware.ns
  cider.nrepl.middleware.slurp
  cider.nrepl.middleware.stacktrace
  cider.nrepl.middleware.track-state
  cider.nrepl.middleware.util
  cider.nrepl.middleware.util.cljs
  cider.nrepl.middleware.util.coerce
  cider.nrepl.middleware.util.error-handling
  cider.nrepl.middleware.util.instrument
  cider.nrepl.middleware.util.meta
  cider.nrepl.middleware.util.nrepl
  cider.nrepl.print-method
  cider.nrepl.version
  clojure.core.protocols
  clojure.core.server
  clojure.core.specs.alpha
  clojure.datafy
  clojure.edn
  clojure.instant
  clojure.java.br
owse
  clojure.java.io
  clojure.java.javadoc
  clojure.java.shell
  clojure.main
  clojure.pprint
  clojure.reflect
  clojure.repl
  clojure.set
  clojure.spec.alpha
  clojure.spec.gen.alpha
  clojure.stacktrace
  clojure.string
  clojure.template
  clojure.test
  clojure.uuid
  clojure.walk
  clojure.zip
  clojurust.test
  nrepl.ack
  nrepl.bencode
  nrepl.cmdline
  nrepl.config
  nrepl.core
  nrepl.middleware
  nrepl.middleware.caught
  nrepl.middleware.completion
  nrepl.middleware.dynamic-loader
  nrepl.middleware.interruptible-eval
  nrepl.middleware.load-file
  nrepl.middleware.lookup
  nrepl.middleware.print
  nrepl.middleware.session
  nrepl.middleware.sideloader
  nrepl.misc
  nrepl.server
  nrepl.transport
  nrepl.util.completion
  nrepl.util.lookup
  nrepl.version}
nil
clj꞉clojurust.test꞉> 
